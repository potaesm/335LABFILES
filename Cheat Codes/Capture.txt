// PWM1 -> PWM5
//step 1: PWM2 -> PWM4
// key '1' off PWM1, PWM2
// key '2' off PWM4
// key '3' on PWM4

//step 2 : Display CNR(PW4) on LCD
//LCD Line0: CNR =0xHHHH
// key '4' increase CNR (PWM4)
// key '5' decrease CNR (PWM4)
// key '6' reset CNR = 0x0FFF (PWM4)

//step 3 : Display CNR (PWM4) 3MS-digits on 7SEG
// Nu_LB-002:	L02_03_PWM0Capture.c

//	PWM0 -> GPA12 - capture input
//	PWM1 -> GPA13 High level: 262 msec, Low level: 786 msec
//	PWM2 -> GPA14 High level: 682 usec, Low level: 682 usec(microsecond)

/*--------------------------------------------------------------------------*/
/*                                                                          */
/* Copyright (c) Nuvoton Technology Corp. All rights reserved.              */
/* edited: june 2014: dejwoot.kha@mail.kmutt.ac.th                          */
/*--------------------------------------------------------------------------*/

#include "Driver\DrvGPIO.h"
#include "LCD_Driver.h"
#include "Driver\DrvI2C.h"
#include "Seven_Segment.h"
#include "Driver\DrvUART.h"
#include "Driver\DrvSYS.h"
#include <stdio.h>																											 
#include "NUC1xx.h"
#include "LCD_Driver.h"
#include "ScanKey.h"

#define	PWM_CNR	0xFFFF
#define DELAY300ms	300000 // The maximal delay time is 335000 us.
#define scanDelay 4000
#define SEG_N0   0x82 
#define SEG_N1   0xEE 
#define SEG_N2   0x07 
#define SEG_N3   0x46 
#define SEG_N4   0x6A  
#define SEG_N5   0x52 
#define SEG_N6   0x12 
#define SEG_N7   0xE6 
#define SEG_N8   0x02 
#define SEG_N9   0x62
#define SEG_Na   0x22
#define SEG_Nb   0x1A
#define SEG_Nc   0x93
#define SEG_Nd   0x0E
#define SEG_Ne   0x13
#define SEG_Nf   0x33

static uint16_t Timer3Counter=0;
uint16_t	CaptureCounter = 0;
uint32_t	CaptureValue[2];

unsigned char SEG_BUF_HEX[16]={SEG_N0, SEG_N1, SEG_N2, SEG_N3, SEG_N4, SEG_N5, SEG_N6, SEG_N7, SEG_N8, SEG_N9, SEG_Na, SEG_Nb, SEG_Nc, SEG_Nd, SEG_Ne, SEG_Nf}; 

void show_seven_segment_Hex(unsigned char no, unsigned char number)
{
    unsigned char temp,i;
	temp=SEG_BUF_HEX[number];
	
	for(i=0;i<8;i++)
	    {
		if((temp&0x01)==0x01)		   		   
		   DrvGPIO_SetBit(E_GPE,i);
		   else
		   DrvGPIO_ClrBit(E_GPE,i);		  
		   temp=temp>>1;
		}
		DrvGPIO_SetBit(E_GPC,4+no);	

}
void seg_display_Hex(int16_t value)
{
  int8_t digit;
		digit = value / 256;
		close_seven_segment();
		show_seven_segment_Hex(3,digit);
		DrvSYS_Delay(scanDelay);
			
		value = value - digit * 256;
		digit = value / 16;
		close_seven_segment();
		show_seven_segment_Hex(2,digit);
		DrvSYS_Delay(scanDelay);

		value = value - digit * 16;
		digit = value;
		close_seven_segment();
		show_seven_segment_Hex(1,digit);
		DrvSYS_Delay(scanDelay);

		//value = value - digit * 10;
		//digit = value;
		//close_seven_segment();
		//show_seven_segment(0,digit);
		//DrvSYS_Delay(scanDelay);
}



//----------------------------------------------------------------------- PWM3 port gpa 15
	void InitPWM3(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM3_I2SMCLK = 1;		// System Manager Control Registers
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM23_EN = 1;	// Enable PWM clock
	SYSCLK->CLKSEL1.PWM23_S = 0;	// Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz 
	PWMA->PPR.CP23 = 1;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMA->CSR.CSR3 = 4;		// clock divider ->	0:/2, 1:/4, 2:/8, 3:/16, 4:/1
	// PWM frequency = PWMxy_CLK/[(prescale+1)*(clock divider)*(CNR+1)]
	// Ex:= 12M/[(1+1)*(1)*(8191)] = 732.5 Hz -> T = 1365 micros. ~ 682+682
	
	/* Step 3. Select PWM Operation mode */
	PWMA->PCR.CH3MOD = 1;	// 0:One-shot mode, 1:Auto-load mode
	// CNR and CMR will be auto-cleared after setting CH0MOD form 0 to 1.
	PWMA->CNR3 = 0x1FFF;	// 0x1FFF = 8191
	PWMA->CMR3 = 0x0FFF;

	PWMA->PCR.CH3INV = 0;	// Inverter -> 0:off, 1:on
	PWMA->PCR.CH3EN = 1;	// PWM function -> 0:Disable, 1:Enable
 	PWMA->POE.PWM3 = 1;		// Output to pin -> 0:Diasble, 1:Enable
	}
	//------------------------------------------------------------------irq PWM0
void PWMA_IRQHandler(void) {		// PWM interrupt subroutine 
	if (PWMA->PIIR.PWMIF0) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMA->PIIR.PWMIF0	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMA->CCR0.CAPIF0) {
		if (PWMA->CCR0.CFLRI0) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CFLR0);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR0.CFLRI0 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMA->CCR0.CRLRI0) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR0);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR0.CRLRI0 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMA->CCR0.CAPIF0 = 1;	// write 1 to clear this bit to zero
		}
	}
	//------------------------------------------------------------------Capture0
void InitCapture0(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM0_AD13 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM01_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL1.PWM01_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMA->PPR.CP01 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMA->CSR.CSR0 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMA->PCR.CH0MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMA->CNR0 = PWM_CNR;			// Set Reload register
	PWMA->CAPENR = 1;				// Enable Capture function pin
	PWMA->CCR0.CAPCH0EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt */
	PWMA->CCR0.CRL_IE0 = 1;	// Enable Capture rising edge interrupt
	PWMA->CCR0.CFL_IE0 = 1;	// Enable Capture falling edge interrupt
	PWMA->PIER.PWMIE0 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMA_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMA->PCR.CH0EN = 1;		// Enable PWM down counter
	}

// FOR --------------------------------------------------------------------------------------------------------------------------------irq PWM1
void PWMA_IRQHandler1(void) {		// PWM interrupt subroutine 
	if (PWMA->PIIR.PWMIF1) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMA->PIIR.PWMIF1	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMA->CCR0.CAPIF1) {
		if (PWMA->CCR0.CFLRI1) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CFLR1);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR0.CFLRI1 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMA->CCR0.CRLRI1) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR1);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR0.CRLRI1 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMA->CCR0.CAPIF1 = 1;	// write 1 to clear this bit to zero
		}
	}
//-----------------------------------------------------------------------------------------------------------------------------Capture1
void InitCapture1(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM1_AD14 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM01_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL1.PWM01_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMA->PPR.CP01 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMA->CSR.CSR1 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMA->PCR.CH1MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMA->CNR1 = PWM_CNR;			// Set Reload register
	PWMA->CAPENR = 2;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMA->CCR0.CAPCH1EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMA->CCR0.CRL_IE1 = 1;	// Enable Capture rising edge interrupt   
	PWMA->CCR0.CFL_IE1 = 1;	// Enable Capture falling edge interrupt
	PWMA->PIER.PWMIE1 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMA_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMA->PCR.CH1EN = 1;		// Enable PWM down counter
	}
	// FOR -------------------------------------------------------------------------------------------------------------------------------irq PWM2
void PWMA_IRQHandler2(void) {		// PWM interrupt subroutine
	if (PWMA->PIIR.PWMIF2) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMA->PIIR.PWMIF2	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMA->CCR2.CAPIF2) {
		if (PWMA->CCR2.CFLRI2) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR2);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR2.CFLRI2 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMA->CCR2.CRLRI2) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR2);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR2.CRLRI2 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMA->CCR2.CAPIF2 = 1;	// write 1 to clear this bit to zero
		}
	}
	//----------------------------------------------------+--------------------------------------------Capture2
void InitCapture2(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM2_AD15 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM23_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL1.PWM23_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMA->PPR.CP23 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMA->CSR.CSR2 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMA->PCR.CH2MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMA->CNR2 = PWM_CNR;			// Set Reload register
	PWMA->CAPENR = 4;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMA->CCR2.CAPCH2EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMA->CCR2.CRL_IE2 = 1;	// Enable Capture rising edge interrupt   
	PWMA->CCR2.CFL_IE2 = 1;	// Enable Capture falling edge interrupt
	PWMA->PIER.PWMIE2 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMA_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMA->PCR.CH2EN = 1;		// Enable PWM down counter
	}
	
	// FOR -------------------------------------------------------------------------------------------------------------------------------irq PWM3
	
void PWMA_IRQHandler3(void) {		// PWM interrupt subroutine
	if (PWMA->PIIR.PWMIF3) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMA->PIIR.PWMIF3	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMA->CCR2.CAPIF3) {
		if (PWMA->CCR2.CFLRI3) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR3);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR2.CFLRI3 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMA->CCR2.CRLRI3) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMA->CRLR3);//usec
			CaptureCounter = 0;				// reset
			PWMA->CCR2.CRLRI3 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMA->CCR2.CAPIF3 = 1;	// write 1 to clear this bit to zero
		}
	}
	//-----------------------------------------------------------------------------------------------------Capture3
void InitCapture3(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM3_I2SMCLK = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM23_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL1.PWM23_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMA->PPR.CP23 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMA->CSR.CSR3 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMA->PCR.CH3MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMA->CNR3 = PWM_CNR;			// Set Reload register
	PWMA->CAPENR = 8;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMA->CCR2.CAPCH3EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMA->CCR2.CRL_IE3 = 1;	// Enable Capture rising edge interrupt   
	PWMA->CCR2.CFL_IE3 = 1;	// Enable Capture falling edge interrupt
	PWMA->PIER.PWMIE3 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMA_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMA->PCR.CH3EN = 1;		// Enable PWM down counter
	}
	
	//------------------------------------------------------------------irq PWM4
void PWMB_IRQHandler4(void) {		// PWM interrupt subroutine 
	if (PWMB->PIIR.PWMIF0) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMB->PIIR.PWMIF0	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMB->CCR0.CAPIF0) {
		if (PWMB->CCR0.CFLRI0) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CFLR0);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR0.CFLRI0 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMB->CCR0.CRLRI0) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR0);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR0.CRLRI0 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMB->CCR0.CAPIF0 = 1;	// write 1 to clear this bit to zero
		}
	}
	//------------------------------------------------------------------Capture4
void InitCapture4(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM0_AD13 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM45_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL2.PWM45_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMB->PPR.CP01 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMB->CSR.CSR0 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMB->PCR.CH0MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMB->CNR0 = PWM_CNR;			// Set Reload register
	PWMB->CAPENR = 1;				// Enable Capture function pin
	PWMB->CCR0.CAPCH0EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt */
	PWMB->CCR0.CRL_IE0 = 1;	// Enable Capture rising edge interrupt
	PWMB->CCR0.CFL_IE0 = 1;	// Enable Capture falling edge interrupt
	PWMB->PIER.PWMIE0 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMB_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMB->PCR.CH0EN = 1;		// Enable PWM down counter
	}

// FOR --------------------------------------------------------------------------------------------------------------------------------irq PWM5
void PWMB_IRQHandler(void) {		// PWM interrupt subroutine 
	if (PWMB->PIIR.PWMIF1) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMB->PIIR.PWMIF1	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMB->CCR0.CAPIF1) {
		if (PWMB->CCR0.CFLRI1) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CFLR1);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR0.CFLRI1 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMB->CCR0.CRLRI1) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR1);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR0.CRLRI1 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMB->CCR0.CAPIF1 = 1;	// write 1 to clear this bit to zero
		}
	}
//-----------------------------------------------------------------------------------------------------------------------------Capture5
void InitCapture5(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM1_AD14 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM45_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL2.PWM45_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMB->PPR.CP01 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMB->CSR.CSR1 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMB->PCR.CH1MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMB->CNR1 = PWM_CNR;			// Set Reload register
	PWMB->CAPENR = 2;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMB->CCR0.CAPCH1EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMB->CCR0.CRL_IE1 = 1;	// Enable Capture rising edge interrupt   
	PWMB->CCR0.CFL_IE1 = 1;	// Enable Capture falling edge interrupt
	PWMB->PIER.PWMIE1 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMB_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMB->PCR.CH1EN = 1;		// Enable PWM down counter
	}
	// FOR -------------------------------------------------------------------------------------------------------------------------------irq PWM6
void PWMB_IRQHandler6(void) {		// PWM interrupt subroutine
	if (PWMB->PIIR.PWMIF2) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMB->PIIR.PWMIF2	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMB->CCR2.CAPIF2) {
		if (PWMB->CCR2.CFLRI2) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR2);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR2.CFLRI2 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMB->CCR2.CRLRI2) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR2);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR2.CRLRI2 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMB->CCR2.CAPIF2 = 1;	// write 1 to clear this bit to zero
		}
	}
	//----------------------------------------------------+--------------------------------------------Capture6
void InitCapture6(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM2_AD15 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM67_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL2.PWM67_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMB->PPR.CP23 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMB->CSR.CSR2 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMB->PCR.CH2MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMB->CNR2 = PWM_CNR;			// Set Reload register
	PWMB->CAPENR = 4;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMB->CCR2.CAPCH2EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMB->CCR2.CRL_IE2 = 1;	// Enable Capture rising edge interrupt   
	PWMB->CCR2.CFL_IE2 = 1;	// Enable Capture falling edge interrupt
	PWMB->PIER.PWMIE2 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMB_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMB->PCR.CH2EN = 1;		// Enable PWM down counter
	}
	
	// FOR -------------------------------------------------------------------------------------------------------------------------------irq PWM7
	
void PWMB_IRQHandler7(void) {		// PWM interrupt subroutine
	if (PWMB->PIIR.PWMIF3) {
		CaptureCounter++;						// Delay (PWM_CNR+1) usec
		if (CaptureCounter == 0) {	// Overflow
			}
		PWMB->PIIR.PWMIF3	=	1;			// write 1 to clear this bit to zero
		}
	if (PWMB->CCR2.CAPIF3) {
		if (PWMB->CCR2.CFLRI3) {		// Calculate High Level width
			CaptureValue[0] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR3);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR2.CFLRI3 = 0;// write 0 to clear this bit to zero if BCn bit is 0
		}
		if (PWMB->CCR2.CRLRI3) {		//Calculate Low Level width
			CaptureValue[1] = CaptureCounter*(PWM_CNR+1)+(PWM_CNR-PWMB->CRLR3);//usec
			CaptureCounter = 0;				// reset
			PWMB->CCR2.CRLRI3 = 0;// write 0 to clear this bit to zero if BCn bit is 0	
			}
		PWMB->CCR2.CAPIF3 = 1;	// write 1 to clear this bit to zero
		}
	}
	//-----------------------------------------------------------------------------------------------------Capture7
void InitCapture7(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPAMFP.PWM3_I2SMCLK = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM67_EN = 1; // Enable PWM clock
	SYSCLK->CLKSEL2.PWM67_S = 0; // Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz
	
	PWMB->PPR.CP23 = 11;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMB->CSR.CSR3 = 4;			// clock divider -> 0:/2, 1:/4, 2:/8, 3:/16, 4:/1
									         
	/* Step 3. Select PWM Operation mode */
	PWMB->PCR.CH3MOD = 1;		// 0:One-shot mode, 1:Auto-load mode
	//CNR and CMR will be auto-cleared after setting CH0MOD from 0 to 1.
	PWMB->CNR3 = PWM_CNR;			// Set Reload register
	PWMB->CAPENR = 8;				// Enable Capture function pin from 2^"CH" = 2^1 = 2
	PWMB->CCR2.CAPCH3EN = 1;// Enable Capture function

	/* Step 4. Set PWM Interrupt change IEx and x=CH */
	PWMB->CCR2.CRL_IE3 = 1;	// Enable Capture rising edge interrupt   
	PWMB->CCR2.CFL_IE3 = 1;	// Enable Capture falling edge interrupt
	PWMB->PIER.PWMIE3 = 1;	// Enable PWM interrupt for down-counter equal zero.
	NVIC_EnableIRQ(PWMB_IRQn);  // Enable PWM inturrupt

	/* Step 5. Enable PWM down counter*/
	PWMB->PCR.CH3EN = 1;		// Enable PWM down counter
	}



//-------------------------------------------------------------------------------------- PWM4 port gpb 11
	void InitPWM4(void) {
 	/* Step 1. GPIO initial */ 
	SYS->GPBMFP.TM3_PWM4 = 1;		// System Manager Control Registers
	SYS->ALTMFP.PB11_PWM4 = 1;
	
	/* Step 2. Enable and Select PWM clock source*/		
	SYSCLK->APBCLK.PWM45_EN = 1;	// Enable PWM clock
	SYSCLK->CLKSEL2.PWM45_S = 0;	// Select 12Mhz for PWM clock source
	// 0:12MHz, 1:32.768 kHz, 2:HCLK, 3:22.1184 MHz 
	PWMB->PPR.CP01 = 100;		// Prescaler 0~255, Setting 0 to stop output clock
	PWMB->CSR.CSR0 = 4;		// clock divider ->	0:/2, 1:/4, 2:/8, 3:/16, 4:/1
	// PWM frequency = PWMxy_CLK/[(prescale+1)*(clock divider)*(CNR+1)]
	// Ex:= 12M/[(11+1)*(1)*(8191)] = 732.5 Hz -> T = 1365 micros. ~ 682+682
	
	/* Step 3. Select PWM Operation mode */
	PWMB->PCR.CH0MOD = 1;	// 0:One-shot mode, 1:Auto-load mode
	// CNR and CMR will be auto-cleared after setting CH0MOD form 0 to 1.
	PWMB->CNR0 = 0xFFFF;	// 0x1FFF = 8191
	PWMB->CMR0 = 0xB7A4;

	PWMB->PCR.CH0INV = 0;	// Inverter -> 0:off, 1:on
	PWMB->PCR.CH0EN = 1;	// PWM function -> 0:Disable, 1:Enable
 	PWMB->POE.PWM0 = 1;		// Output to pin -> 0:Diasble, 1:Enable
	}
//--------------------------------------------------------------------Timer3
void InitTIMER3(void) {
	/* Step 1. Enable and Select Timer clock source */          
	SYSCLK->CLKSEL1.TMR3_S = 0;	// Select 12Mhz for Timer3 clock source
	// 0 = 12 MHz, 1 = 32 kHz, 2 = HCLK, 7 = 22.1184 MHz
	SYSCLK->APBCLK.TMR3_EN = 1;	// Enable Timer0 clock source

	/* Step 2. Select Operation mode */	
	TIMER3->TCSR.MODE = 1;			// 1 -> Select periodic mode
	// 0 = One shot, 1 = Periodic, 2 = Toggle, 3 = continuous counting mode
	
	/* Step 3. Select Time out period 
	= (Period of timer clock input) * (8-bit Prescale + 1) * (24-bit TCMP)*/
	TIMER3->TCSR.PRESCALE = 11;	// Set Prescale [0~255]
	TIMER3->TCMPR = 1000000;		// Set TCMPR [0~16777215]
	// (1/12000000)*(11+1)*(1000000)= 1 sec or 1 Hz

	/* Step 4. Enable interrupt */
	TIMER3->TCSR.IE = 1;
	TIMER3->TISR.TIF = 1;				// Write 1 to clear the interrupt flag 		
	NVIC_EnableIRQ(TMR3_IRQn);	// Enable Timer0 Interrupt

	/* Step 5. Enable Timer module */
	TIMER3->TCSR.CRST = 1;			// Reset up counter
	TIMER3->TCSR.CEN = 1;				// Enable Timer0
	}
//----------------------------------------------------------------------PWM2
void TMR3_IRQHandler(void) {	// Timer0 interrupt subroutine
	char lcd0_buffer[18] = "CNR=0xHHHH";
	char lcd1_buffer[18] = "Timer3:";
	char lcd2_buffer[18] = "High:";
	char lcd3_buffer[18] = "Low: ";
	
	sprintf(lcd0_buffer+6, "%X  ", PWMB->CNR0);
	print_lcd(0, lcd0_buffer);
	
	
	Timer3Counter += 1;
	sprintf(lcd1_buffer+7, " %d s.", Timer3Counter);
	print_lcd(1, lcd1_buffer);
 	
	/* Display capture values */
	if (CaptureValue[0] >= 1000000) {
		sprintf(lcd2_buffer+5, "%dsec", CaptureValue[0]/1000000);
		} else if (CaptureValue[0] >= 1000) {
		sprintf(lcd2_buffer+5, "%dmsec", CaptureValue[0]/1000);
		} else
		sprintf(lcd2_buffer+5, "%dusec", CaptureValue[0]);
	print_lcd(2, lcd2_buffer);

	if (CaptureValue[1] >= 1000000) {
		sprintf(lcd3_buffer+5, "%dsec", CaptureValue[1]/1000000);
		} else if (CaptureValue[1] >= 1000) {
		sprintf(lcd3_buffer+5, "%dmsec", CaptureValue[1]/1000);
		} else
		sprintf(lcd3_buffer+5, "%dusec", CaptureValue[1]);
	print_lcd(3, lcd3_buffer);
	
	TIMER3->TISR.TIF = 1;    		// Write 1 to clear the interrupt flag 
	}

//----------------------------------------------------------------------MAIN
int32_t main (void) {
	int8_t number;
	UNLOCKREG();
	SYSCLK->PWRCON.XTL12M_EN = 1;
	SYSCLK->CLKSEL0.HCLK_S = 0;
	LOCKREG();
	Initial_pannel();  //call initial pannel function
	clr_all_pannal();

	//InitPWM0();
	//InitPWM1();
	//InitPWM2();
  InitPWM3();
	//InitPWM4();
	//InitPWM5();
	//InitPWM6();
	//InitPWM7();
	
	InitCapture5();
	
	InitTIMER3();
	print_lcd(0, "Capture demo");
	print_lcd(1, ">>GPA12");
	 
	OpenKeyPad();					 	
	
	while(1) {
	  number = Scankey();           // scan keypad to get a number (1~9)
		 if(number==1){
			 PWMA->PCR.CH1EN = 0;
			 PWMA->PCR.CH2EN = 0;
			 }
			if(number==2){
			 PWMB->PCR.CH0EN = 0;
			 }
			if(number==3){
			 PWMB->PCR.CH0EN = 1;
			 } 
		if(number==4){
			PWMB -> CNR0+= 0x0001;
			DrvSYS_Delay(5000); 
		 }
			 
			if(number==5){
			  PWMB -> CNR0-= 0x0001;
				DrvSYS_Delay(5000); 
			 }
			if(number==6){
				PWMB -> CNR0 = 0x0FFF;
			 } 
		show_seven_segment(0,number); // display number on 7-segment LEDs
		DrvSYS_Delay(5000);           // delay time for keeping 7-segment display 
		close_seven_segment();	      // turn off 7-segment LEDs		
		seg_display_Hex(Timer3Counter);
		}
	}
